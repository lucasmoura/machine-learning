from numpy import zeros


class ConfusionMatrix(object):

    """
    This class will be used to reprent a confusiom matrix, which is one
    way to evaluate a machine learning algorithm. This matrix will
    possess the following format:

       | C1 | C2 | C3 |
    C1 | 5  | 1  | 0  |
    C2 | 1  | 4  | 1  |
    C3 | 2  | 0  | 4  |

    In the example above, each row of the matrix represents
    how the label Cx was classified in a certain output of
    a machine learning algorithm, In the first row, the label
    C1 was correctly classified as C1 5 times, and incorrectly
    classified as C2 one time. The number of datapoints labeled
    as C1 can be obtained by the sum of the row's column and the
    overall accuracy of the machine learning algorithm, can be
    obtained by the sum of the matrix diagonal divided by
    the sum of the whole matrix.
    """

    """
    :param inputLabels:  The labels that come with the data
                         used to train the machine learning algorithm.
                         This variable must be a column vector.
    :param outputLabels: The labels that were generated by the machine
                         learning algorithm. This variable must also
                         be a column matrix.
    :param validLabels   The possible and ordered label values that
                         a datapoint can be classified on. This parameter
                         is required in order to better enumerate
                         the labels for creating the matrix values.
                         By default, this parameter receives the array
                         containing [0, 1].
    """
    def __init__(self, inputLabels, outputLabels, validLabels=[0, 1]):
        self.inputLabels = inputLabels
        self.outputLabels = outputLabels
        self._numLabels = validLabels

        self._labelsIndex = validLabels

    """
    Get method for num labels.
    """
    @property
    def numLabels(self):
        return self._numLabels

    """
    Set the value of numLabels as the number of elements inside
    the validLabels array.
    """
    @numLabels.setter
    def numLabels(self, validLabels):
        self._numLabels = len(validLabels)

    """
    Get method for labels index.
    """
    @property
    def labelsIndex(self):
        return self._labelsIndex

    """
    Method used to create a dictionary from the valid labels
    to discrete values. For example, given the valid labels
    [x, y, z], the following dictionary will be created:

    {
        x: 0
        y: 1
        z: 2
    }
    """
    @labelsIndex.setter
    def labelsIndex(self, validLabels):
        labelDict = {}
        indexValue = 0

        for label in validLabels:
            labelDict[label] = indexValue
            indexValue += 1

        self._labelsIndex = labelDict

    """
    This method is used to create the confusion matrix values. However,
    a separate one will be used to construct the matrix visualization.
    """
    def confusionMatrixValues(self):
        matrixValues = zeros(shape=(self.numLabels, self.numLabels))
        size = self.inputLabels.shape[0]

        for i in range(size):
            row = self.labelsIndex[self.inputLabels[i][0]]
            column = self.labelsIndex[self.outputLabels[i][0]]

            matrixValues[row][column] += 1

        return matrixValues
